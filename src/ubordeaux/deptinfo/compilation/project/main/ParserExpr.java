package ubordeaux.deptinfo.compilation.project.main;

import java.util.Iterator;
import ubordeaux.deptinfo.compilation.project.environment.*;
import ubordeaux.deptinfo.compilation.project.type.*;
import beaver.*;
import java.util.ArrayList;
import ubordeaux.deptinfo.compilation.project.node.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "Parser.grammar".
 */
public class ParserExpr extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjLtTy54KOVRjt50iMr2DHB3G30X91L2014q0wGeX006cXWmWgzW8M550Wz2AYedIL9e8" +
		"qwKtfDYoesBk8lNo#tVlkRdDtsJiFylCFkUJj#sRcpVVDpCvE0Oha80i#j40zT459BCP9E1" +
		"cdu5IKm6au7MVWJ9o5it4EQk1gN8b6g8d6Q8AcQ8Oql8fbA8fIM8uLU0rUF2nVuHavXDluj" +
		"mIvk07NeWtQ8WUTq3UAXs89nrw4rx47tP24EgZD#gNzpDY367jN7B6xOmRkmqYCmjsu5qCn" +
		"3FVZ0JcahVT4U72sjFY$Q6aWIbue2WQZ22C9uomyxd76E#BSXGpsvod6INEDqok1EDCTSRh" +
		"WHSQPoZWjNUFqII3EHaUSoQZFE5qPfxThd049nDdfYFCy5kgutUGQvzO4uknpnDcDFOnp2#" +
		"FSx1hdXGBZd8yBz0kuIFbSd8SBKGRbK04fg8JAg8fgk8pAP3JNhsGbXc2MY$9ED4Gjb5MFT" +
		"nIeZEpbBDp3#WsGYV9Q#n7KTOdK7XUhRZr6u34NPKTK32h7o2uNPMTSeig96EkghAAwIsEC" +
		"tLHgPs0#vcAUl8Kfc8QU1Mfln1DKfwh7pLY9qUZlqeRgghmyvlkxGXLNnLIcg#AQcCeijB8" +
		"LMSYEeModlZh4z7czAdh4LFPJnS2OogLO9czoTbaxJMjSvpft7#TgbsQF$9DOuAAy7JFvZJ" +
		"#DsVAQV8OvBif9M8TdvLFvX2ru3Y#vA5V9NhpC6Re6hs03jhWejs873c0xiH$0NXUb$kGtD" +
		"M8gWxzZLqP#uP4vZf#y75UD4pd$LOvzGeF9L#MtneKi6HcP5ton0UjHJC23U0Z3uxRydk3m" +
		"kOds9eTFO3NMOXiHxHVDPosk5dNuZQTpRwd7FcPmlwdFNQSXLxn6mRuQxAU7fz8YFACMiyz" +
		"I5RatTE6UKuMdlrokeprLuUCvCecd1kihA6tlgHToFoqJnKFbX6FdSENioDY1#W7syVILn9" +
		"DHFB6RyqJGagU4Lbm3itXMoEPAwDFMfqTuIBIbqQ9KjkE0SL8BDKuADJxktqbyLuKPn$BXe" +
		"pA9jvV2Z5E3fox$6wfPoEEMgkEMKwXnh3diuvgIn1Dued72lu3masr9FTiQV3S1JJ9xQBee" +
		"sxBloK7rzIxAy5wQZ6Bmx3qmMBiQzxzuscJohsASoafiNJpAwjnptPJnZfr9RU3z#NYVIE7" +
		"viY2jZoCIyboLf#6#F6iUUnl#tqfhfx5M66kdASK$jxbRYlEeeZtooQvpjxyzpqtEtsJEg4" +
		"ukodxKMVEu4jLjNQDxM6hDv6IUyDs$COzTdcnzCIBSGmjKYlvGHJccCbZZE2WZll28d7n#a" +
		"kEfSIBdFylnftlmJVcjaqCMxzeHUQ7veLoMTvholDLS7BTbUxBh1kAqezqkv9DMLtIp43uh" +
		"2um8l37KkXy9py3WR8KvZ6oTYmSJ9Qqpi5MU2EZpAAa6OBmNoAF$qiHSmCjJcxc6p3QO#yZ" +
		"Lo9#HhoB$ISu0F6oFjocP6cyRSXro9t8hSayouHr8lfDy6taCcM4yRBzt17abcQTvuqWeFc" +
		"#ty4vdZ6AEFFRTMuAwT7$Q#81f#l3iYjOlvX#cvdI$xNsEwGpD$vNfvUHCBLl7E2bgRwETf" +
		"lPUsgqrLYOVpnAjjEmWothHU9jb5OWIci#OvbrCQoplrqpdCTs1YT7gQuGoR#x64BLvEpVB" +
		"Qp#ti1xVYNb6lEyGzfNCp0pBi#xfvSYfH3fz$gPj#blB#PvClWkZhAFEJK0H3yT6#ssopnx" +
		"hdMRhsDtZ6DyUnDsET0xHdnYWwGdqtPsObxzTdhhQpq6Q7gOybfXDp69SQrxbQNuVOexQ3x" +
		"5znHs#5X0hg6zBjjewaULL7UMhY3LgJs9PTV8yJSyDwRoiXnRy5jPPQV9MKeTunjuD$5K8I" +
		"rVoip5RURxoVkKZVZQBAf#ddAhSGBcnyc3buSeZbQShpuniaxaeCizO7QPP5b$$pCrXwUqE" +
		"#w33VjzXVvU$3bVhuBTX$gXv6vH$zhF7g#syHDF5jTpWVqqjw#ZeJsVLSMqobZfYfSRJhpZ" +
		"wtSZXCrTvSYZFan9OHnowdVdJdfJ4OWVMCMDSM9kEQfoF2wxh$J3CLxQZVH95VpXa6pKSMc" +
		"lSSnrblIFhuWsw$5iE8VYJRR95DiicsIWRPBsy8kjahIoMHVA2F2zvjcADFCtdKyIJn4pY2" +
		"U9nWhk1J2Mc49C9Vit2hrQuoiWCOffTVxoCKq#pPAmyOrkhxESA6IEZvJ5vL4R9IrIjPbwU" +
		"BBVBykH5cvVPpwNsSucsURioTn1PgFQ2O8$cosoPPrjSVUHzUK$ptv5VvHVvMNwIe$AZ794" +
		"Vv7lvZlbVoBVoZMD4FYS#LlkmVAJM1yhSFUIWl6tRNyg7clkkyXoPQwrJOetp0MA$x0lwtM" +
		"C$NxMVEsGd73$PBQ$p#PVygUdVYJze3E69g2YugXCc#jWmU6VtyjPky1uV7QqTQ45aALgoN" +
		"dFwkfQd80jjwBilymF8fl$hgEb7xiTq9zhSfGYJDnKB1cypNju$F8G1dY880mDODi2#8Pas" +
		"kj3kJkHo7SdbgQyhTLsPxiPwtSZjo7NffpsrxPckfxZQ1PdKrwU#3fad5yAwuti80mt83Ob" +
		"hY4P4OoA3#KuqORqcx6zJSZEsgnSrlPYVmtHl#klDT6scQpDTct5gCPqVPW5sD1X1f4N1e7" +
		"y0xPDpgG==");

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};
 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
			System.err.format("*** " + msg + " ligne %d, colonne %d\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()));
		}
		
	private Environment typeEnvironment = new Environment("types");
	private Environment procedureEnvironment = new Environment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;

	private final Action[] actions;

	public ParserExpr() {
		super(PARSING_TABLES);
		actions = new Action[] {
			RETURN6,	// [0] program = type_declaration_part variable_declaration_part procedure_definition_part TOKEN_BEGIN statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			Action.NONE,  	// [1] type_declaration_part = 
			RETURN2,	// [2] type_declaration_part = TOKEN_TYPE type_declaration_list; returns 'type_declaration_list' although none is marked
			new Action() {	// [3] type_declaration_list = type_declaration_list type_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [4] type_declaration_list = type_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [5] type_declaration = type_declaration_head TOKEN_AFF type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [6] type_declaration_head = TOKEN_IDENTIFIER
			Action.RETURN,	// [7] type = simple_type
			Action.RETURN,	// [8] type = named_type
			Action.RETURN,	// [9] type = index_type
			Action.RETURN,	// [10] type = array_type
			Action.RETURN,	// [11] type = pointer_type
			Action.RETURN,	// [12] type = structure_type
			Action.RETURN,	// [13] simple_type = TOKEN_STRING
			Action.RETURN,	// [14] simple_type = TOKEN_INTEGER
			Action.RETURN,	// [15] simple_type = TOKEN_BOOLEAN
			Action.RETURN,	// [16] named_type = TOKEN_IDENTIFIER
			Action.RETURN,	// [17] index_type = enumerated_type
			Action.RETURN,	// [18] index_type = subrange_type
			RETURN4,	// [19] enumerated_type = init_enumerated_type TOKEN_LPAR identifier_list TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			Action.NONE,  	// [20] init_enumerated_type = 
			RETURN3,	// [21] subrange_type = TOKEN_LIT_INTEGER TOKEN_DOTDOT TOKEN_LIT_INTEGER; returns 'TOKEN_LIT_INTEGER' although none is marked
			RETURN3,	// [22] subrange_type = TOKEN_IDENTIFIER TOKEN_DOTDOT TOKEN_IDENTIFIER; returns 'TOKEN_IDENTIFIER' although none is marked
			RETURN6,	// [23] array_type = TOKEN_ARRAY TOKEN_LBRACKET range_type TOKEN_RBRACKET TOKEN_OF type; returns 'type' although none is marked
			Action.RETURN,	// [24] range_type = enumerated_type
			Action.RETURN,	// [25] range_type = subrange_type
			Action.RETURN,	// [26] range_type = named_type
			RETURN2,	// [27] pointer_type = TOKEN_CIRC type; returns 'type' although none is marked
			RETURN4,	// [28] structure_type = TOKEN_STRUCT TOKEN_LBRACE feature_list_type TOKEN_RBRACE; returns 'TOKEN_RBRACE' although none is marked
			new Action() {	// [29] feature_list_type = feature_list_type feature_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [30] feature_list_type = feature_type
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [31] feature_type = TOKEN_IDENTIFIER TOKEN_COLON type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.NONE,  	// [32] variable_declaration_part = 
			RETURN2,	// [33] variable_declaration_part = TOKEN_VAR variable_declaration_list; returns 'variable_declaration_list' although none is marked
			new Action() {	// [34] variable_declaration_list = variable_declaration_list variable_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [35] variable_declaration_list = variable_declaration
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN4,	// [36] variable_declaration = identifier_list TOKEN_COLON type TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			new Action() {	// [37] identifier_list = identifier_list TOKEN_COMMA TOKEN_IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [38] identifier_list = TOKEN_IDENTIFIER
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.NONE,  	// [39] procedure_definition_part = 
			Action.RETURN,	// [40] procedure_definition_part = procedure_definition_list
			new Action() {	// [41] procedure_definition_list = procedure_definition_list procedure_definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [42] procedure_definition_list = procedure_definition
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN2,	// [43] procedure_definition = procedure_definition_head block; returns 'block' although none is marked
			RETURN2,	// [44] procedure_definition = procedure_declaration_head TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [45] procedure_definition_head = procedure_head
			Action.RETURN,	// [46] procedure_declaration_head = procedure_head
			RETURN5,	// [47] procedure_head = TOKEN_PROCEDURE TOKEN_IDENTIFIER TOKEN_LPAR argt_part TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			RETURN7,	// [48] procedure_head = TOKEN_FUNCTION TOKEN_IDENTIFIER TOKEN_LPAR argt_part TOKEN_RPAR TOKEN_COLON type; returns 'type' although none is marked
			Action.NONE,  	// [49] argt_part = 
			Action.RETURN,	// [50] argt_part = argt_list
			new Action() {	// [51] argt_list = argt_list TOKEN_COMMA argt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [52] argt_list = argt
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN3,	// [53] argt = TOKEN_IDENTIFIER TOKEN_COLON type; returns 'type' although none is marked
			RETURN4,	// [54] block = variable_declaration_part TOKEN_BEGIN statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			new Action() {	// [55] statement_list = statement_list statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 2]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [56] statement_list = statement
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [57] statement = simple_statement
			Action.RETURN,	// [58] statement = structured_statement
			Action.RETURN,	// [59] simple_statement = assignment_statement
			Action.RETURN,	// [60] simple_statement = procedure_statement
			Action.RETURN,	// [61] simple_statement = new_statement
			Action.RETURN,	// [62] simple_statement = dispose_statement
			Action.RETURN,	// [63] simple_statement = println_statement
			Action.RETURN,	// [64] simple_statement = readln_statement
			Action.RETURN,	// [65] simple_statement = return_statement
			RETURN4,	// [66] assignment_statement = variable_access TOKEN_AFF expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN2,	// [67] procedure_statement = procedure_expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN4,	// [68] procedure_expression = TOKEN_IDENTIFIER TOKEN_LPAR expression_part TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			Action.NONE,  	// [69] expression_part = 
			Action.RETURN,	// [70] expression_part = expression_list
			new Action() {	// [71] expression_list = expression_list TOKEN_COMMA expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [72] expression_list = expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			RETURN3,	// [73] new_statement = TOKEN_NEW variable_access TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [74] dispose_statement = TOKEN_DISPOSE variable_access TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [75] println_statement = TOKEN_PRINTLN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [76] readln_statement = TOKEN_READLN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			RETURN3,	// [77] return_statement = TOKEN_RETURN expression TOKEN_SEMIC; returns 'TOKEN_SEMIC' although none is marked
			Action.RETURN,	// [78] structured_statement = block
			Action.RETURN,	// [79] structured_statement = if_statement
			Action.RETURN,	// [80] structured_statement = while_statement
			Action.RETURN,	// [81] structured_statement = switch_statement
			RETURN4,	// [82] if_statement = TOKEN_IF expression TOKEN_THEN statement; returns 'statement' although none is marked
			RETURN6,	// [83] if_statement = TOKEN_IF expression TOKEN_THEN statement TOKEN_ELSE statement; returns 'statement' although none is marked
			RETURN4,	// [84] while_statement = TOKEN_WHILE expression TOKEN_DO statement; returns 'statement' although none is marked
			RETURN5,	// [85] switch_statement = TOKEN_SWITCH expression TOKEN_BEGIN case_statement_list TOKEN_END; returns 'TOKEN_END' although none is marked
			RETURN3,	// [86] case_statement_list = case_statement_list case_statement case_default; returns 'case_default' although none is marked
			Action.RETURN,	// [87] case_statement_list = case_statement
			RETURN4,	// [88] case_statement = TOKEN_CASE identifier_list TOKEN_COLON statement; returns 'statement' although none is marked
			Action.NONE,  	// [89] case_default = 
			RETURN3,	// [90] case_default = TOKEN_DEFAULT TOKEN_COLON statement; returns 'statement' although none is marked
			Action.RETURN,	// [91] variable_access = TOKEN_IDENTIFIER
			RETURN4,	// [92] variable_access = variable_access TOKEN_LBRACKET expression TOKEN_RBRACKET; returns 'TOKEN_RBRACKET' although none is marked
			RETURN2,	// [93] variable_access = expression TOKEN_CIRC; returns 'TOKEN_CIRC' although none is marked
			RETURN3,	// [94] expression = expression TOKEN_PLUS expression; returns 'expression' although none is marked
			RETURN3,	// [95] expression = expression TOKEN_MINUS expression; returns 'expression' although none is marked
			RETURN3,	// [96] expression = expression TOKEN_TIMES expression; returns 'expression' although none is marked
			RETURN3,	// [97] expression = expression TOKEN_DIV expression; returns 'expression' although none is marked
			RETURN2,	// [98] expression = TOKEN_MINUS expression; returns 'expression' although none is marked
			RETURN3,	// [99] expression = expression TOKEN_OR expression; returns 'expression' although none is marked
			RETURN3,	// [100] expression = expression TOKEN_AND expression; returns 'expression' although none is marked
			RETURN2,	// [101] expression = TOKEN_NOT expression; returns 'expression' although none is marked
			RETURN3,	// [102] expression = expression TOKEN_LT expression; returns 'expression' although none is marked
			RETURN3,	// [103] expression = expression TOKEN_LE expression; returns 'expression' although none is marked
			RETURN3,	// [104] expression = expression TOKEN_GT expression; returns 'expression' although none is marked
			RETURN3,	// [105] expression = expression TOKEN_GE expression; returns 'expression' although none is marked
			RETURN3,	// [106] expression = expression TOKEN_EQ expression; returns 'expression' although none is marked
			RETURN3,	// [107] expression = expression TOKEN_NE expression; returns 'expression' although none is marked
			RETURN3,	// [108] expression = TOKEN_LPAR expression TOKEN_RPAR; returns 'TOKEN_RPAR' although none is marked
			Action.RETURN,	// [109] expression = procedure_expression
			Action.RETURN,	// [110] expression = variable_access
			Action.RETURN,	// [111] expression = literal
			Action.RETURN,	// [112] literal = TOKEN_LIT_INTEGER
			Action.RETURN,	// [113] literal = TOKEN_LIT_STRING
			Action.RETURN,	// [114] literal = TOKEN_TRUE
			Action.RETURN,	// [115] literal = TOKEN_FALSE
			Action.RETURN	// [116] literal = TOKEN_NULL
		};

 
	report = new Events();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
