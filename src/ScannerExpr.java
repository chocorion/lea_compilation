/* The following code was generated by JFlex 1.7.0 */

import beaver.Symbol;
import beaver.Scanner;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/home/adri/Code/Projet Compil/scanner/Scanner.jflex</tt>
 */
class ScannerExpr extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\2\26\0\1\56\1\5\3\0\1\54\1\0\1\41\1\42"+
    "\1\53\1\51\1\35\1\52\1\37\1\1\1\6\11\4\1\40\1\36"+
    "\1\57\1\47\1\60\2\0\6\10\24\3\1\43\1\0\1\44\1\50"+
    "\1\3\1\0\1\25\1\22\1\30\1\32\1\14\1\26\1\21\1\34"+
    "\1\17\2\3\1\24\1\3\1\20\1\23\1\13\1\3\1\16\1\15"+
    "\1\11\1\27\1\31\1\33\1\7\1\12\1\3\1\45\1\55\1\46"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\4\17\3"+
    "\1\5\1\6\1\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\2\1"+
    "\1\23\1\24\1\25\2\0\1\26\1\0\12\3\1\27"+
    "\4\3\1\30\7\3\1\31\1\3\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\0\1\4\5\3\1\41"+
    "\6\3\1\42\7\3\1\43\3\3\1\0\1\44\1\45"+
    "\1\46\2\3\1\47\6\3\1\50\5\3\1\51\3\3"+
    "\1\0\10\3\1\52\1\3\1\53\1\54\3\3\1\55"+
    "\1\0\2\3\1\56\1\57\1\60\1\61\1\62\5\3"+
    "\1\0\1\63\1\3\1\64\1\65\1\3\1\66\1\67"+
    "\1\0\1\3\1\70\1\0\1\71\70\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\61\0\61"+
    "\0\u0436\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\u0467\0\61\0\61\0\61\0\61\0\u0498\0\u04c9\0\u04fa"+
    "\0\u052b\0\u055c\0\u058d\0\u05be\0\61\0\u05ef\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\223\0\u080a\0\u083b\0\u086c\0\u089d\0\223\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\223\0\u0a25\0\61"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\u0a56\0\u05ef"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\223\0\u0b7c\0\u0bad"+
    "\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\223\0\u0ca2\0\u0cd3\0\u0d04"+
    "\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\223\0\u0df9\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\223\0\223\0\223\0\u0ebd\0\u0eee\0\223\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\223\0\u1045\0\u1076"+
    "\0\u10a7\0\u10d8\0\u1109\0\223\0\u113a\0\u116b\0\u119c\0\u11cd"+
    "\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355"+
    "\0\223\0\u1386\0\223\0\223\0\u13b7\0\u13e8\0\u1419\0\223"+
    "\0\u144a\0\u147b\0\u14ac\0\223\0\223\0\223\0\223\0\223"+
    "\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\223\0\u1603"+
    "\0\223\0\223\0\u1634\0\223\0\223\0\u1665\0\u1696\0\223"+
    "\0\u16c7\0\223\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd"+
    "\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85"+
    "\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d"+
    "\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95"+
    "\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d"+
    "\0\u214e\0\u217f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\2\4"+
    "\1\10\1\4\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\4\1\17\1\20\1\4\1\21\1\22\1\4\1\23"+
    "\1\24\1\25\1\26\1\4\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\62\0\1\53\62\0\2\4\1\0\27\4\30\0\1\5"+
    "\1\0\1\5\52\0\5\54\1\55\53\54\4\0\1\5"+
    "\1\0\1\5\1\56\54\0\2\4\1\0\4\4\1\57"+
    "\3\4\1\60\15\4\1\61\27\0\2\4\1\0\10\4"+
    "\1\62\16\4\27\0\2\4\1\0\12\4\1\63\3\4"+
    "\1\64\10\4\27\0\2\4\1\0\3\4\1\65\21\4"+
    "\1\66\1\4\27\0\2\4\1\0\6\4\1\67\20\4"+
    "\27\0\2\4\1\0\12\4\1\70\5\4\1\71\6\4"+
    "\27\0\2\4\1\0\6\4\1\72\12\4\1\73\5\4"+
    "\27\0\2\4\1\0\6\4\1\74\6\4\1\75\11\4"+
    "\27\0\2\4\1\0\20\4\1\76\6\4\27\0\2\4"+
    "\1\0\10\4\1\77\16\4\27\0\2\4\1\0\17\4"+
    "\1\100\1\4\1\101\5\4\27\0\2\4\1\0\17\4"+
    "\1\102\7\4\27\0\2\4\1\0\17\4\1\103\7\4"+
    "\27\0\2\4\1\0\6\4\1\104\2\4\1\105\3\4"+
    "\1\106\11\4\27\0\2\4\1\0\26\4\1\107\63\0"+
    "\1\110\70\0\1\111\65\0\1\112\61\0\1\113\52\0"+
    "\1\114\60\0\1\115\60\0\1\116\11\0\2\53\1\2"+
    "\56\53\5\117\1\55\53\117\4\0\1\120\1\0\1\120"+
    "\1\0\1\120\3\0\1\120\5\0\1\120\2\0\2\120"+
    "\1\0\1\120\1\0\1\120\31\0\2\4\1\0\5\4"+
    "\1\121\21\4\27\0\2\4\1\0\21\4\1\122\5\4"+
    "\27\0\2\4\1\0\6\4\1\123\20\4\27\0\2\4"+
    "\1\0\11\4\1\124\3\4\1\125\11\4\27\0\2\4"+
    "\1\0\24\4\1\126\2\4\27\0\2\4\1\0\7\4"+
    "\1\127\17\4\27\0\2\4\1\0\10\4\1\130\16\4"+
    "\27\0\2\4\1\0\11\4\1\131\15\4\27\0\2\4"+
    "\1\0\3\4\1\132\13\4\1\133\7\4\27\0\2\4"+
    "\1\0\3\4\1\134\23\4\27\0\2\4\1\0\25\4"+
    "\1\135\1\4\27\0\2\4\1\0\16\4\1\136\10\4"+
    "\27\0\2\4\1\0\13\4\1\137\13\4\27\0\2\4"+
    "\1\0\15\4\1\140\11\4\27\0\2\4\1\0\10\4"+
    "\1\141\16\4\27\0\2\4\1\0\16\4\1\142\10\4"+
    "\27\0\2\4\1\0\12\4\1\143\14\4\27\0\2\4"+
    "\1\0\7\4\1\144\17\4\27\0\2\4\1\0\10\4"+
    "\1\145\16\4\27\0\2\4\1\0\20\4\1\146\6\4"+
    "\27\0\2\4\1\0\7\4\1\147\17\4\27\0\2\4"+
    "\1\0\11\4\1\150\15\4\24\0\5\151\1\55\53\151"+
    "\3\0\2\4\1\0\6\4\1\152\20\4\27\0\2\4"+
    "\1\0\6\4\1\153\20\4\27\0\2\4\1\0\12\4"+
    "\1\154\14\4\27\0\2\4\1\0\12\4\1\155\14\4"+
    "\27\0\2\4\1\0\22\4\1\156\4\4\27\0\2\4"+
    "\1\0\6\4\1\157\20\4\27\0\2\4\1\0\11\4"+
    "\1\160\7\4\1\161\5\4\27\0\2\4\1\0\3\4"+
    "\1\162\23\4\27\0\2\4\1\0\21\4\1\163\5\4"+
    "\27\0\2\4\1\0\24\4\1\164\2\4\27\0\2\4"+
    "\1\0\6\4\1\165\20\4\27\0\2\4\1\0\16\4"+
    "\1\166\10\4\27\0\2\4\1\0\11\4\1\167\15\4"+
    "\27\0\2\4\1\0\16\4\1\170\10\4\27\0\2\4"+
    "\1\0\17\4\1\171\7\4\27\0\2\4\1\0\7\4"+
    "\1\172\17\4\27\0\2\4\1\0\22\4\1\173\4\4"+
    "\27\0\2\4\1\0\6\4\1\174\20\4\27\0\2\4"+
    "\1\0\17\4\1\175\7\4\27\0\2\4\1\0\5\4"+
    "\1\176\21\4\27\0\2\4\1\0\16\4\1\177\10\4"+
    "\24\0\5\200\1\55\53\200\3\0\2\4\1\0\3\4"+
    "\1\201\23\4\27\0\2\4\1\0\6\4\1\202\20\4"+
    "\27\0\2\4\1\0\12\4\1\203\14\4\27\0\2\4"+
    "\1\0\22\4\1\204\4\4\27\0\2\4\1\0\22\4"+
    "\1\205\4\4\27\0\2\4\1\0\10\4\1\206\16\4"+
    "\27\0\2\4\1\0\16\4\1\207\10\4\27\0\2\4"+
    "\1\0\13\4\1\210\13\4\27\0\2\4\1\0\12\4"+
    "\1\211\14\4\27\0\2\4\1\0\6\4\1\212\20\4"+
    "\27\0\2\4\1\0\4\4\1\213\22\4\27\0\2\4"+
    "\1\0\6\4\1\214\20\4\27\0\2\4\1\0\3\4"+
    "\1\215\23\4\27\0\2\4\1\0\21\4\1\216\5\4"+
    "\27\0\2\4\1\0\15\4\1\217\11\4\27\0\2\4"+
    "\1\0\6\4\1\220\20\4\24\0\5\221\1\55\53\221"+
    "\3\0\2\4\1\0\16\4\1\222\10\4\27\0\2\4"+
    "\1\0\24\4\1\223\2\4\27\0\2\4\1\0\13\4"+
    "\1\224\13\4\27\0\2\4\1\0\3\4\1\225\23\4"+
    "\27\0\2\4\1\0\26\4\1\226\27\0\2\4\1\0"+
    "\12\4\1\227\14\4\27\0\2\4\1\0\12\4\1\230"+
    "\14\4\27\0\2\4\1\0\6\4\1\231\20\4\27\0"+
    "\2\4\1\0\17\4\1\232\7\4\27\0\2\4\1\0"+
    "\11\4\1\233\15\4\27\0\2\4\1\0\16\4\1\234"+
    "\10\4\27\0\2\4\1\0\7\4\1\235\17\4\24\0"+
    "\5\236\1\55\53\236\3\0\2\4\1\0\12\4\1\237"+
    "\14\4\27\0\2\4\1\0\21\4\1\240\5\4\27\0"+
    "\2\4\1\0\10\4\1\241\16\4\27\0\2\4\1\0"+
    "\12\4\1\242\14\4\27\0\2\4\1\0\15\4\1\243"+
    "\11\4\27\0\2\4\1\0\3\4\1\244\23\4\27\0"+
    "\2\4\1\0\6\4\1\245\20\4\24\0\5\246\1\55"+
    "\53\246\3\0\2\4\1\0\10\4\1\247\16\4\27\0"+
    "\2\4\1\0\12\4\1\250\14\4\24\0\5\251\1\55"+
    "\53\251\3\0\2\4\1\0\6\4\1\252\20\4\24\0"+
    "\5\253\1\55\53\253\5\254\1\55\53\254\5\255\1\55"+
    "\53\255\5\256\1\55\53\256\5\257\1\55\53\257\5\260"+
    "\1\55\53\260\5\261\1\55\53\261\5\262\1\55\53\262"+
    "\5\263\1\55\53\263\5\264\1\55\53\264\5\265\1\55"+
    "\53\265\5\266\1\55\53\266\5\267\1\55\53\267\5\270"+
    "\1\55\53\270\5\271\1\55\53\271\5\272\1\55\53\272"+
    "\5\273\1\55\53\273\5\274\1\55\53\274\5\275\1\55"+
    "\53\275\5\276\1\55\53\276\5\277\1\55\53\277\5\300"+
    "\1\55\53\300\5\301\1\55\53\301\5\302\1\55\53\302"+
    "\5\303\1\55\53\303\5\304\1\55\53\304\5\305\1\55"+
    "\53\305\5\306\1\55\53\306\5\307\1\55\53\307\5\310"+
    "\1\55\53\310\5\311\1\55\53\311\5\312\1\55\53\312"+
    "\5\313\1\55\53\313\5\314\1\55\53\314\5\315\1\55"+
    "\53\315\5\316\1\55\53\316\5\317\1\55\53\317\5\320"+
    "\1\55\53\320\5\321\1\55\53\321\5\322\1\55\53\322"+
    "\5\323\1\55\53\323\5\324\1\55\53\324\5\325\1\55"+
    "\53\325\5\326\1\55\53\326\5\327\1\55\53\327\5\330"+
    "\1\55\53\330\5\331\1\55\53\331\5\332\1\55\53\332"+
    "\5\333\1\55\53\333\5\334\1\55\53\334\5\335\1\55"+
    "\53\335\5\336\1\55\53\336\5\337\1\55\53\337\5\340"+
    "\1\55\53\340\5\341\1\55\53\341\5\342\1\55\53\342"+
    "\5\0\1\55\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8624];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\24\1\2\11\1\1\7\11\1\1\4\11"+
    "\5\1\2\0\1\11\1\0\31\1\7\11\1\0\31\1"+
    "\1\0\26\1\1\0\20\1\1\0\14\1\1\0\7\1"+
    "\1\0\2\1\1\0\1\1\70\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ScannerExpr(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	System.out.println("End of the file !");
	System.out.println(yytext()); return new Symbol(Terminals.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 58: break;
          case 2: 
            { System.out.println("DIV    	-> " + yytext()); return new Symbol(Terminals.TOKEN_DIV		, yyline, yycolumn);
            } 
            // fall through
          case 59: break;
          case 3: 
            { System.out.println("IDENTIFIER    	-> " + yytext()); return new Symbol(Terminals.TOKEN_IDENTIFIER 	, yyline, yycolumn);
            } 
            // fall through
          case 60: break;
          case 4: 
            { System.out.println("LIT_INTEGER   	-> " + yytext()); return new Symbol(Terminals.TOKEN_LIT_INTEGER , yyline, yycolumn);
            } 
            // fall through
          case 61: break;
          case 5: 
            { System.out.println("COMMA  	-> " + yytext()); return new Symbol(Terminals.TOKEN_COMMA		, yyline, yycolumn);
            } 
            // fall through
          case 62: break;
          case 6: 
            { System.out.println("SEMI   	-> " + yytext()); return new Symbol(Terminals.TOKEN_SEMIC		, yyline, yycolumn);
            } 
            // fall through
          case 63: break;
          case 7: 
            { System.out.println("COLON  	-> " + yytext()); return new Symbol(Terminals.TOKEN_COLON		, yyline, yycolumn);
            } 
            // fall through
          case 64: break;
          case 8: 
            { System.out.println("LPAR   	-> " + yytext()); return new Symbol(Terminals.TOKEN_LPAR		, yyline, yycolumn);
            } 
            // fall through
          case 65: break;
          case 9: 
            { System.out.println("RPAR   	-> " + yytext()); return new Symbol(Terminals.TOKEN_RPAR		, yyline, yycolumn);
            } 
            // fall through
          case 66: break;
          case 10: 
            { System.out.println("LBRACKET  -> " + yytext()); return new Symbol(Terminals.TOKEN_LBRACKET	, yyline, yycolumn);
            } 
            // fall through
          case 67: break;
          case 11: 
            { System.out.println("RBRACKET  -> " + yytext()); return new Symbol(Terminals.TOKEN_RBRACKET	, yyline, yycolumn);
            } 
            // fall through
          case 68: break;
          case 12: 
            { System.out.println("LBRACE   	-> " + yytext()); return new Symbol(Terminals.TOKEN_LBRACE		, yyline, yycolumn);
            } 
            // fall through
          case 69: break;
          case 13: 
            { System.out.println("RBRACE   	-> " + yytext()); return new Symbol(Terminals.TOKEN_RBRACE		, yyline, yycolumn);
            } 
            // fall through
          case 70: break;
          case 14: 
            { System.out.println("AFF 		-> " + yytext()); return new Symbol(Terminals.TOKEN_AFF		, yyline, yycolumn);
            } 
            // fall through
          case 71: break;
          case 15: 
            { System.out.println("CIRC		-> " + yytext()); return new Symbol(Terminals.TOKEN_CIRC	, yyline, yycolumn);
            } 
            // fall through
          case 72: break;
          case 16: 
            { System.out.println("PLUS   	-> " + yytext()); return new Symbol(Terminals.TOKEN_PLUS	, yyline, yycolumn);
            } 
            // fall through
          case 73: break;
          case 17: 
            { System.out.println("MINUS  	-> " + yytext()); return new Symbol(Terminals.TOKEN_MINUS	, yyline, yycolumn);
            } 
            // fall through
          case 74: break;
          case 18: 
            { System.out.println("MULT   	-> " + yytext()); return new Symbol(Terminals.TOKEN_TIMES	, yyline, yycolumn);
            } 
            // fall through
          case 75: break;
          case 19: 
            { System.out.println("NOT    	-> " + yytext()); return new Symbol(Terminals.TOKEN_NOT 	, yyline, yycolumn);
            } 
            // fall through
          case 76: break;
          case 20: 
            { System.out.println("LT     	-> " + yytext()); return new Symbol(Terminals.TOKEN_LT 		, yyline, yycolumn);
            } 
            // fall through
          case 77: break;
          case 21: 
            { System.out.println("GT     	-> " + yytext()); return new Symbol(Terminals.TOKEN_GT 		, yyline, yycolumn);
            } 
            // fall through
          case 78: break;
          case 22: 
            { System.out.println("LIT_STRING    	-> " + yytext()); return new Symbol(Terminals.TOKEN_LIT_STRING 	, yyline, yycolumn);
            } 
            // fall through
          case 79: break;
          case 23: 
            { System.out.println("IF  		-> " + yytext()); return new Symbol(Terminals.TOKEN_IF			, yyline, yycolumn);
            } 
            // fall through
          case 80: break;
          case 24: 
            { System.out.println("OF  		-> " + yytext()); return new Symbol(Terminals.TOKEN_OF			, yyline, yycolumn);
            } 
            // fall through
          case 81: break;
          case 25: 
            { System.out.println("DO  		-> " + yytext()); return new Symbol(Terminals.TOKEN_DO			, yyline, yycolumn);
            } 
            // fall through
          case 82: break;
          case 26: 
            { System.out.println("DOTDOT 	-> " + yytext()); return new Symbol(Terminals.TOKEN_DOTDOT		, yyline, yycolumn);
            } 
            // fall through
          case 83: break;
          case 27: 
            { System.out.println("EQ     	-> " + yytext()); return new Symbol(Terminals.TOKEN_EQ 		, yyline, yycolumn);
            } 
            // fall through
          case 84: break;
          case 28: 
            { System.out.println("AND    	-> " + yytext()); return new Symbol(Terminals.TOKEN_AND		, yyline, yycolumn);
            } 
            // fall through
          case 85: break;
          case 29: 
            { System.out.println("OR     	-> " + yytext()); return new Symbol(Terminals.TOKEN_OR 		, yyline, yycolumn);
            } 
            // fall through
          case 86: break;
          case 30: 
            { System.out.println("NE     	-> " + yytext()); return new Symbol(Terminals.TOKEN_NE 		, yyline, yycolumn);
            } 
            // fall through
          case 87: break;
          case 31: 
            { System.out.println("LE     	-> " + yytext()); return new Symbol(Terminals.TOKEN_LE 		, yyline, yycolumn);
            } 
            // fall through
          case 88: break;
          case 32: 
            { System.out.println("GE     	-> " + yytext()); return new Symbol(Terminals.TOKEN_GE 		, yyline, yycolumn);
            } 
            // fall through
          case 89: break;
          case 33: 
            { System.out.println("END  		-> " + yytext()); return new Symbol(Terminals.TOKEN_END			, yyline, yycolumn);
            } 
            // fall through
          case 90: break;
          case 34: 
            { System.out.println("NEW  		-> " + yytext()); return new Symbol(Terminals.TOKEN_NEW			, yyline, yycolumn);
            } 
            // fall through
          case 91: break;
          case 35: 
            { System.out.println("VAR  		-> " + yytext()); return new Symbol(Terminals.TOKEN_VAR			, yyline, yycolumn);
            } 
            // fall through
          case 92: break;
          case 36: 
            { System.out.println("TYPE  	-> " + yytext()); return new Symbol(Terminals.TOKEN_TYPE		, yyline, yycolumn);
            } 
            // fall through
          case 93: break;
          case 37: 
            { System.out.println("TRUE     		-> " + yytext()); return new Symbol(Terminals.TOKEN_TRUE 		, yyline, yycolumn);
            } 
            // fall through
          case 94: break;
          case 38: 
            { System.out.println("THEN  	-> " + yytext()); return new Symbol(Terminals.TOKEN_THEN		, yyline, yycolumn);
            } 
            // fall through
          case 95: break;
          case 39: 
            { System.out.println("ELSE  	-> " + yytext()); return new Symbol(Terminals.TOKEN_ELSE		, yyline, yycolumn);
            } 
            // fall through
          case 96: break;
          case 40: 
            { System.out.println("NULL     		-> " + yytext()); return new Symbol(Terminals.TOKEN_NULL 		, yyline, yycolumn);
            } 
            // fall through
          case 97: break;
          case 41: 
            { System.out.println("CASE  	-> " + yytext()); return new Symbol(Terminals.TOKEN_CASE		, yyline, yycolumn);
            } 
            // fall through
          case 98: break;
          case 42: 
            { System.out.println("BEGIN  	-> " + yytext()); return new Symbol(Terminals.TOKEN_BEGIN		, yyline, yycolumn);
            } 
            // fall through
          case 99: break;
          case 43: 
            { System.out.println("ARRAY  	-> " + yytext()); return new Symbol(Terminals.TOKEN_ARRAY		, yyline, yycolumn);
            } 
            // fall through
          case 100: break;
          case 44: 
            { System.out.println("FALSE     		-> " + yytext()); return new Symbol(Terminals.TOKEN_FALSE 		, yyline, yycolumn);
            } 
            // fall through
          case 101: break;
          case 45: 
            { System.out.println("WHILE  	-> " + yytext()); return new Symbol(Terminals.TOKEN_WHILE		, yyline, yycolumn);
            } 
            // fall through
          case 102: break;
          case 46: 
            { System.out.println("STRING  	-> " + yytext()); return new Symbol(Terminals.TOKEN_STRING		, yyline, yycolumn);
            } 
            // fall through
          case 103: break;
          case 47: 
            { System.out.println("STRUCT  	-> " + yytext()); return new Symbol(Terminals.TOKEN_STRUCT		, yyline, yycolumn);
            } 
            // fall through
          case 104: break;
          case 48: 
            { System.out.println("SWITCH  	-> " + yytext()); return new Symbol(Terminals.TOKEN_SWITCH		, yyline, yycolumn);
            } 
            // fall through
          case 105: break;
          case 49: 
            { System.out.println("RETURN  	-> " + yytext()); return new Symbol(Terminals.TOKEN_RETURN		, yyline, yycolumn);
            } 
            // fall through
          case 106: break;
          case 50: 
            { System.out.println("READLN  	-> " + yytext()); return new Symbol(Terminals.TOKEN_READLN		, yyline, yycolumn);
            } 
            // fall through
          case 107: break;
          case 51: 
            { System.out.println("PRINTLN  	-> " + yytext()); return new Symbol(Terminals.TOKEN_PRINTLN		, yyline, yycolumn);
            } 
            // fall through
          case 108: break;
          case 52: 
            { System.out.println("INTEGER  	-> " + yytext()); return new Symbol(Terminals.TOKEN_INTEGER		, yyline, yycolumn);
            } 
            // fall through
          case 109: break;
          case 53: 
            { System.out.println("BOOLEAN  	-> " + yytext()); return new Symbol(Terminals.TOKEN_BOOLEAN		, yyline, yycolumn);
            } 
            // fall through
          case 110: break;
          case 54: 
            { System.out.println("DEFAULT  	-> " + yytext()); return new Symbol(Terminals.TOKEN_DEFAULT		, yyline, yycolumn);
            } 
            // fall through
          case 111: break;
          case 55: 
            { System.out.println("DISPOSE  	-> " + yytext()); return new Symbol(Terminals.TOKEN_DISPOSE		, yyline, yycolumn);
            } 
            // fall through
          case 112: break;
          case 56: 
            { System.out.println("FUNCTION	-> " + yytext()); return new Symbol(Terminals.TOKEN_FUNCTION	, yyline, yycolumn);
            } 
            // fall through
          case 113: break;
          case 57: 
            { System.out.println("PROCEDURE	-> " + yytext()); return new Symbol(Terminals.TOKEN_PROCEDURE	, yyline, yycolumn);
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
